# The Mars educational game created for ADL's True Game-based learning project
--- 
extends: http://vwf.example.com/scene.vwf
implements:
- "http://vwf.example.com/blockly/manager.vwf"
properties:
  enableShadows: true
  ambientColor: [ 150, 140, 140 ]
  userObject: null
  blockly_autoClose: false
  activeScenarioPath:
    set: |
      this.setScenario( value );
      this.activeScenarioPath = value;
    value: "introScreenScenario"
  sceneBlackboard: {}
methods:
  setScenario:
  resetScenario:
  advanceScenario:
  getCurrentScenario:
  createGraph:
  removeGraph:
  createMiniRover:
  removeMiniRover:
  createGridDisplay:
  removeGridDisplay:
  addStatus:
  addAlert:
  addSubtitle:
  executeBlock:
events:
  introScreensComplete:
  scenarioReset:
  scenarioChanged:
  scenarioStarted:
  scenarioSucceeded:
  scenarioFailed:
  blinkHUD:
  stopBlinkHUD:
  blinkTab:
  stopBlinkTab:
  clearBlockly:
  selectLastBlock:
  showCommsImage:
  hideCommsImage:
  blockExecuted:
  enableHelicam:
  disableHelicam:
  toggledHelicam:
  toggledGraph:
  toggledTiles:
  resetRoverSensors:
children:
  soundManager:
    includes: source/marsGameSound.vwf
  globalTriggerManager:
    includes: source/scenario/globalScenarioTriggers.vwf
  environment:
    extends: http://vwf.example.com/node3.vwf
    source: assets/3d/Terrain/scene.dae
    type: model/vnd.collada+xml
    properties:
      castShadows: true
      receiveShadows: true
    children:
      crashPod:
        extends: http://vwf.example.com/node3.vwf
        source: assets/3d/crash_pod/crash_pod.dae
        type: model/vnd.collada+xml
        properties:
          castShadows: true
          receiveShadows: true
          translation: [ 0, -1.5, 0 ]
      roverTracks:
        extends: http://vwf.example.com/node3.vwf
        source: assets/3d/Terrain/rover_tracks_straight.dae
        type: model/vnd.collada+xml
        properties:
          translation: [ 0, 1, 0 ]
  blocks:
    includes: source/blocks.vwf
  airDust:
    includes: source/dustAir.vwf
  smoke1:
    extends: source/smokeParticle.vwf
    properties:
      translation: [ -5, 34.75, 3 ]
  smoke2:
    extends: source/smokeParticle.vwf
    properties:
      translation: [ 4.5, 26, 0 ]
  smoke3:
    extends: source/smokeParticle.vwf
    properties:
      translation: [ 13.5, 16.5, 2 ]
  backdrop:
    extends: http://vwf.example.com/node3.vwf
    source: assets/3d/Terrain/backdrop.dae
    type: model/vnd.collada+xml
  sunLight:
    extends: http://vwf.example.com/light.vwf
    properties:
      lightType: "directional"
      color: [ 255, 245, 230 ]
      translation: [ 2, 1, 16 ]
      intensity: 0.5
      castShadows: true
      shadowDarkness: 0.5
      shadowCameraBottom: -64
      shadowCameraTop: 64
      shadowCameraLeft: -64
      shadowCameraRight: 64
      shadowCameraFar: 24
      shadowMapWidth: 2048
      shadowMapHeight: 2048
      shadowBias: -0.0025
      target: [ 0, 0, 0 ]
      offsetFromTarget: [ 2, 1, 16 ]
    methods:
      setUpEvents:
      followCamera:
    scripts:
      - source: source/lights.js
  envLight:
    extends: http://vwf.example.com/light.vwf
    properties:
      lightType: "hemisphere"
      translation: [ 0, 0, 100 ]
      color: [ 255, 200, 175 ]
      groundColor: [ 200, 160, 80 ]
      intensity: 0.7
  player:
    extends: http://vwf.example.com/node3.vwf
    methods:
      initializeEventHandlers:
      togglePerspective:
      setRoverVisible:
    children:
      camera:
        extends: http://vwf.example.com/camera.vwf
        implements: [ "http://vwf.example.com/navigable.vwf" ]
        properties:
          navmode: walk
          translationSpeed: 0
          translation: [ 0, 0, 1 ]
          rotation: [ 0, 0, 1, 270 ]
          far: 100000
          pointOfView:
            set: |
              this.changePointOfView$( value );
            value: thirdPerson
          targetPath:
            set: |
              this.setTargetPath$( value );
            value: "/player/rover"
          firstPersonOffset: [ 0, 0, 1 ]
          thirdPersonOffset: [ 0, -15.531, 5 ]
          topDownOffset: [ 0, 0, 40 ]
          orbiting: false
          needToSetupEventHandler$: false
        methods:
          onSceneReady$:
          changePointOfView$:
          setTargetPath$:
          followTarget$:
        scripts:
        - source: "source/camera.js"
      rover:
        extends: source/rover.vwf
        implements: [ "http://vwf.example.com/blockly/controller.vwf", "source/griddable.vwf" ]
        source: assets/3d/Rover/rover_retro.dae
        type: model/vnd.collada+xml
        properties:
          displayName: "Rover"
          castShadows: true
          receiveShadows: true
          terrainName: "environment"
          currentGridSquare: [ 0, 0 ]
          sensorValue: false
        children:
          cargo:
            extends: source/inventory.vwf
            properties:
              capacity: 4
              inventoryIsVisible: false
    scripts:
     - source: source/player.js
  pickups:
    extends: http://vwf.example.com/node3.vwf
    children:
      radio:
        extends: source/pickups/radio.vwf
        properties:
          animationPlaying: true
          animationLoop: true
      battery:
        extends: source/pickups/battery_1.vwf
      helicam:
        extends: source/pickups/helicam.vwf
      minirover:
        extends: source/pickups/minirover.vwf
      trackanomaly:
        extends: source/pickups/trackanomaly.vwf
  introScreenScenario:
    includes: source/scenario/introScreenScenario.vwf
  scenario1a:
    includes: source/scenario/scenario1a.vwf
  scenario1b:
    includes: source/scenario/scenario1b.vwf
  scenario1c:
    includes: source/scenario/scenario1c.vwf
  scenario1d:
    includes: source/scenario/scenario1d.vwf
  scenario1e:
    includes: source/scenario/scenario1e.vwf
  scenario1f:
    includes: source/scenario/scenario1f.vwf
  scenario1g:
    includes: source/scenario/scenario1g.vwf
  scenario1h:
    includes: source/scenario/scenario1h.vwf
  scenario2a:
    includes: source/scenario/scenario2a.vwf
  scenario2b:
    includes: source/scenario/scenario2b.vwf
  scenario2c:
    includes: source/scenario/scenario2c.vwf
  scenario2d:
    includes: source/scenario/scenario2d.vwf
  scenario2e:
    includes: source/scenario/scenario2e.vwf
  scenario2f:
    includes: source/scenario/scenario2f.vwf
  scenario3a:
    includes: source/scenario/scenario3a.vwf
  scenario3b:
    includes: source/scenario/scenario3b.vwf
  scenario3c:
    includes: source/scenario/scenario3c.vwf
  scenario3d:
    includes: source/scenario/scenario3d.vwf
  scenario3e:
    includes: source/scenario/scenario3e.vwf
  blocklyGraph:
    extends: http://vwf.example.com/graphtool/graph.vwf
    implements: "source/griddable.vwf"
    properties:
      graphScale: 3
      gridInterval: 1
      gridLineInterval: 4
      gridLength: 64
      xAxisVisible: true
      yAxisVisible: true
      zAxisVisible: false
      gridVisible: true
      axisOpacity: 1
      gridOpacity: 0.75
      renderTop: true
    children:
      blocklyLine:
        extends: http://vwf.example.com/graphtool/graphlinefunction.vwf
        properties:
          lineFunction:
            set: |
              this.lineFunction = value;
              this.lineGraphed();
            value: undefined
          startValue: -64
          endValue: 64
          pointCount: 400
          color: [ 100, 255, 100 ]
          opacity: 1
          lineThickness: 0.15
          renderTop: true
          visible: false
        events:
          lineGraphed:
    scripts: |
      this.initialize = function() {
        this.future( 0 ).setGraphVisibility( false );
      }
  gridTileGraph:
    extends: http://vwf.example.com/graphtool/graph.vwf
    properties:
      graphScale: 3
      gridInterval: 1
      gridLineInterval: 4
      gridLength: 1
      xAxisVisible: false
      yAxisVisible: false
      zAxisVisible: false
      gridVisible: false
      axisOpacity: 1
      gridOpacity: 1
      renderTop: false
      tileVisible: false
    methods:
      toggleTileVisibility: |
        this.tileVisible = !this.tileVisible;
        for ( var tile in this.children ) {
          this.children[ tile ].visible = this.tileVisible;
        }
        //@ sourceURL=scene.gridTileGraph.toggleTileVisiblity
  alerts:
    extends: http://vwf.example.com/logger.vwf
    properties:
      logger_maxLogs: 1
      logger_lifeTime: 10000
      logger_logs: []
    scripts:
    - source: source/loggerHelper.js
  status:
    extends: http://vwf.example.com/logger.vwf
    properties:
      logger_maxLogs: 4
      logger_lifeTime: 5000
      logger_logs: []
    scripts:
    - source: source/loggerHelper.js
  subtitles:
    extends: http://vwf.example.com/logger.vwf
    properties:
      logger_maxLogs: 10
      logger_lifeTime: 10000
      logger_logs: []
    events:
      addSubtitle:
    scripts:
    - source: source/loggerHelper.js
scripts: 
 - source: source/scene.js
