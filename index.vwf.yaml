# Copyright 2014 Lockheed Martin Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may 
# not use this file except in compliance with the License. You may obtain 
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and 
# limitations under the License.

--- 
extends: http://vwf.example.com/scene.vwf
implements:
  - "http://vwf.example.com/blockly/manager.vwf"
properties:
  enableShadows: true
  shadowMapCullFace: "back"
  ambientColor: [ 70, 65, 65 ]
  backgroundColor: [ 225, 145, 75 ]
  userObject: null
  blockly_autoClose: false
  activeScenarioPath:
    set: |
      this.setScenario( value );
  playerId: "test"
  version: "Development"
  sceneBlackboard: {}
  roverSignalValue: 0
  roverHeadingValue: 0
  roverTabBlinking: false
  graphTabBlinking: false
  blockly_baseExecutionSpeed: 0.5
  # applicationState tracks what the application is currently doing
  #   in its execution process.
  #   Valid states are: loading, menu, playing
  # TODO: Potential app states: paused, video, syncing (allowing all
  #   clients to reach the same state before continuing)
  applicationState:
    set: |
      this.setApplicationState( value );
    value: loading
  watchList: []
methods:
  setScenario:
  resetScenario:
  advanceScenario:
  getCurrentScenario:
  getScenarios:
  getScenarioPaths:
  addStatus:
  addAlert:
  addSubtitle:
  executeBlock:
  handleDrawingBlocks:
  displayTiles:
  displayGraph:
  setCinematicView:
  resetView:
  restartGame:
  attemptLogin:
  loadGame:
  setApplicationState:
  newGame:
  continueGame:
  applicationLoaded:
  blinkTab:
  stopBlinkTab:
  playVideo:
  pauseGame:
  unpauseGame:
  resetHUDState:
  selectBlocklyNode:
  enableBlocklyNodes:
  disableBlocklyNodes:
  drawSchematicTriangle:
  hideSchematicTriangle:
  openMissionBrief:
  setGridAxes:
  addToWatchList:
  clearWatchList:
  checkWatchList:
  getWatchListNodes:
  addAxisOffset:
  removeAxisOffset:
events:
  gameStarted:
  scenarioReset:
  scenarioChanged:
  scenarioStarted:
  scenarioSucceeded:
  scenarioFailed:
  gotScenarioPaths:
  clearBlockly:
  selectLastBlock:
  updatedBlocklyVariable:
  showCommsImage:
  hideCommsImage:
  blockExecuted:
  blocklyCompletedPolygon:
  blocklyFailedPolygon:
  toggledHelicam:
  toggledGraph:
  toggledTiles:
  resetRoverSensors:
  enableBlocklyTabs:
  clearBlocklyTabs:
  videoPlayed:
  progressFound:
  loadedGame:
  storedScenario:
  blackboardWritten:
  paused:
  unpaused:
  missionBriefOpened:
  missionBriefClosed:
  loadedMissionBrief:
children:
  # naniteTest:
  #   extends: source/naniteParticle.vwf
  #   properties:
  #     start: [ 0, 6, 2 ]
  #     stop: [ 0, 12, 2 ]
  mediaManager:
    extends: http://vwf.example.com/node.vwf
    children:
      videoManager:
        extends: http://vwf.example.com/jplayer/videoManager.vwf
        properties:
          preload: "auto" 
          containerDivId: "jp_container_1"
          playerDivId: "jquery_jplayer_1"
          containerSize: [1024, 768]
          playerSize: [1024, 768]
  hud:
    includes: source/hud/marsGameHud.vwf
  mainMenu:
    includes: source/mainMenu.vwf
  timer:
    includes: source/timer.vwf
  gameCam:
    includes: source/gameCamera.vwf
  cinematicCameraController:
    extends: source/cameraTarget.vwf
    implements:
      - http://vwf.example.com/sceneGetter.vwf
    properties:
      defaultMount: default
      cameraState:
        target:
        mountName:
    methods:
      panToNode:
      getCameraPosition:
      copyCameraState:
      restoreCameraState:
    children:
      default:
        extends: source/cameraMount.vwf
        properties:
          navmode: none
          cameraSpeed: 0
    scripts:
      - source: source/cinematicCameraController.js
  soundManager:
    includes: source/marsGameSound.vwf
  # instrumentationManager:
  #   includes: source/instrumentationManager.vwf
  globalTriggerManager:
    includes: source/scenario/globalScenarioTriggers.vwf
  triggerGroupManager:
    includes: source/triggers/groups/triggerGroupManager.vwf
  environment:
    extends: http://vwf.example.com/node3.vwf
    children:
      terrain:
        extends: http://vwf.example.com/node3.vwf
        source: assets/3d/Mars_Assets/terrain_mix.dae
        type: model/vnd.collada+xml
        properties:
          castShadows: true
          receiveShadows: true
        children:
          material:
            extends: source/shaders/mixMap.vwf
            properties:
              mixMap: "assets/3d/Mars_Assets/terrain_mixmap.png"
              diffuseMaps:
                - { "url": "assets/3d/Mars_Assets/level2_ground3_d.png", "wrapTexture": true }
                - { "url": "assets/3d/Mars_Assets/dirt.png", "wrapTexture": true }
                - { "url": "assets/3d/Mars_Assets/level2_ground1_d.png", "wrapTexture": true }
                - { "url": "assets/3d/Mars_Assets/dark_dirt.png", "wrapTexture": true }
              normalMaps: 
                - { "url": "assets/3d/Mars_Assets/level2_ground3_n.png", "wrapTexture": true }
                - { "url": "assets/3d/Mars_Assets/dirt_n.png", "wrapTexture": true }
                - { "url": "assets/3d/Mars_Assets/level2_ground1_n.png", "wrapTexture": true }
                - { "url": "assets/3d/Mars_Assets/dark_dirt_n.png", "wrapTexture": true }
              specularMaps:
                - { "url": "assets/3d/Mars_Assets/level2_ground3_s.png", "wrapTexture": true }
                - { "url": "assets/3d/Mars_Assets/dirt_s.png", "wrapTexture": true }
                - { "url": "assets/3d/Mars_Assets/level2_ground1_s.png", "wrapTexture": true }
                - { "url": "assets/3d/Mars_Assets/dark_dirt_s.png", "wrapTexture": true }
              tileMap:
                url: "assets/3d/Mars_Assets/tilemap.png"
                magFilter: "nearest"
                minFilter: "nearest"
              tileMapOrigin: [ -128, -128 ]
              tileMapSize: [ 256, 256 ]
              textureResolution: 128
              shininess: 5
              normalScale: [ 0.5, 0.5 ]
              gridInterval: 3
              laserWidth: 0.1
              laserStrength: 0.1
              laserIntensity: 2
              gridColor: 0xFFDDAA
              gridAxes: [ 0, 0 ]
              gridVisible: 0
              tilesVisible: 0
              tileColor: 0x3A4A40
              triangle: []
      environmentObjects:
        extends: http://vwf.example.com/node3.vwf
        source: assets/3d/Mars_Assets/mars_assets.dae
        type: model/vnd.collada+xml
        properties:
          castShadows: true
          receiveShadows: true
      heightmap:
        extends: http://vwf.example.com/heightmap.vwf
        source: assets/3d/Mars_Assets/heightmap.png
        type: image/png
        properties:
          minWorldX: -256
          maxWorldX: 256
          minWorldY: -192
          maxWorldY: 320
          minWorldZ: -5
          maxWorldZ: 25
      roverTracks:
        extends: http://vwf.example.com/node3.vwf
        source: assets/3d/Terrain/rover_tracks_straight.dae
        type: model/vnd.collada+xml
      dragMarks: 
        extends: http://vwf.example.com/node3.vwf
        source: assets/3d/Terrain/drag_marks.dae
        type: model/vnd.collada+xml
  tileMap:
    extends: source/tileMap.vwf
    source: assets/3d/Mars_Assets/tilemap.png
    type: image/png
    properties:
      mapOrigin: [ -96, -96 ]
      mapSize: [ 256, 256 ]
      tileSize: 3
  airDust:
    includes: source/dustAir.vwf
  smoke1:
    extends: source/smokeParticle.vwf
    properties:
      translation: [ -5, 34.75, 3 ]
  smoke2:
    extends: source/smokeParticle.vwf
    properties:
      translation: [ 4.5, 26, 0 ]
  smoke3:
    extends: source/smokeParticle.vwf
    properties:
      translation: [ 13.5, 16.5, 2 ]
  sunLight:
    extends: http://vwf.example.com/directionallight.vwf
    properties:
      color: [ 255, 245, 230 ]
      translation: [ 2, 1, 16 ]
      intensity: 0.55
      castShadows: true
      shadowDarkness: 0.6
      shadowCameraBottom: -64
      shadowCameraTop: 64
      shadowCameraLeft: -64
      shadowCameraRight: 64
      shadowCameraFar: 24
      shadowMapWidth: 2048
      shadowMapHeight: 2048
      shadowBias: -0.01
      target: [ 0, 0, 0 ]
      offsetFromTarget: [ 2, 1, 16 ]
    methods:
      setUpEvents:
      followCamera:
    scripts:
    - source: source/lights.js
  envLight:
    extends: http://vwf.example.com/hemispherelight.vwf
    properties:
      translation: [ 0, 0, 100 ]
      color: [ 255, 200, 175 ]
      groundColor: [ 200, 160, 80 ]
      intensity: 0.5
  player:
    extends: http://vwf.example.com/node3.vwf
    children:
      rover:
        extends: source/fourWheeledRover.vwf
        implements: 
        - http://vwf.example.com/blockly/controller.vwf
        - source/cameraTarget.vwf
        source: assets/3d/Rover/rover.dae
        type: model/vnd.collada+xml
        properties:
          defaultMount: thirdPerson
          displayName: "Rover"
          castShadows: true
          receiveShadows: true
          executionSpeed: 0.5
          sceneNode:
            get: |
              if ( !this.sceneNode ) {
                this.sceneNode = this.find( "/" )[ 0 ];
              }
              return this.sceneNode;
          terrainName:
            set: |
              this.terrainName = value;
              this.terrain = this.find( "//" + value )[ 0 ];
              //@ sourceURL=index.vwf.player.rover.terrainName.set
            value: environment
          terrain:
            get: |
              if ( !this.terrain ) {
                this.terrain = this.find( "//" + this.terrainName )[ 0 ];
              }
              return this.terrain;
              //@ sourceURL=index.vwf.player.rover.terrain.get
          sensorValue: false
          wheelFL:
            get: |
              if ( !this.wheelFL ) {
                this.wheelFL = this.find( "rover_base/front_spring_l/wheel" )[ 0 ];
              }
              return this.wheelFL;
          wheelBL:
            get: |
              if ( !this.wheelBL ) {
                this.wheelBL = this.find( "rover_base/rear_spring_l/wheel001" )[ 0 ];
              }
              return this.wheelBL;
          wheelFR:
            get: |
              if ( !this.wheelFR ) {
                this.wheelFR = this.find( "rover_base/front_spring_r/wheel002" )[ 0 ];
              }
              return this.wheelFR;
          wheelBR:
            get: |
              if ( !this.wheelBR ) {
                this.wheelBR = this.find( "rover_base/rear_spring_r/wheel003" )[ 0 ];
              }
              return this.wheelBR;
          wheelRadius: 0.3304
          wheels:
            - "wheelFL"
            - "wheelBL"
            - "wheelFR"
            - "wheelBR"
        children:
          firstPerson:
            extends: source/cameraMount.vwf
            properties:
              navmode: walk
              translation: [ 0, 0, 1 ]
              cameraPose: [ 0, 0, 0 ]
              cameraSpeed: 0
              targetVisible: false
              useTargetRotation: true
          thirdPerson:
            extends: source/cameraMount.vwf
            properties:
              navmode: thirdPerson
              cameraPose: [ 16, 0, -15 ]
              cameraSpeed: 0
              usePoseFromCamera: true
          topDown:
            extends: source/cameraMount.vwf
            properties:
              navmode: topDown
              worldOffset: [ 0, 0, 40 ]
              cameraPose: [ 0, 0, -90 ]
              cameraSpeed: 10
          rover_base:
            extends: http://vwf.example.com/node3.vwf
            children: 
              front_spring_l:
                extends: http://vwf.example.com/node3.vwf
                children: 
                  wheel:
                    extends: http://vwf.example.com/node3.vwf
              rear_spring_l:
                extends: http://vwf.example.com/node3.vwf
                children: 
                  wheel001:
                    extends: http://vwf.example.com/node3.vwf
              front_spring_r:
                extends: http://vwf.example.com/node3.vwf
                children: 
                  wheel002:
                    extends: http://vwf.example.com/node3.vwf
                    children: 
                      material:
                        extends: http://vwf.example.com/material.vwf
              rear_spring_r:
                extends: http://vwf.example.com/node3.vwf
                children: 
                  wheel003:
                    extends: http://vwf.example.com/node3.vwf
                    children: 
                      material:
                        extends: http://vwf.example.com/material.vwf
      rover2:
        visible: false
        extends: source/rover.vwf
        implements: 
        - http://vwf.example.com/blockly/controller.vwf
        - source/cameraTarget.vwf
        source: assets/3d/scoutrover/scout_rover.dae
        type: model/vnd.collada+xml
        properties:
          defaultMount: thirdPerson
          displayName: "Rover2"
          castShadows: true
          receiveShadows: true
          executionSpeed: 0.5
          surveyArray: []
          sceneNode:
            get: |
              if ( !this.sceneNode ) {
                this.sceneNode = this.find( "/" )[ 0 ];
              }
              return this.sceneNode;
          terrainName:
            set: |
              this.terrainName = value;
              this.terrain = this.find( "//" + value )[ 0 ];
              //@ sourceURL=index.vwf.player.rover.terrainName.set
            value: environment
          terrain:
            get: |
              if ( !this.terrain ) {
                this.terrain = this.find( "//" + this.terrainName )[ 0 ];
              }
              return this.terrain;
              //@ sourceURL=index.vwf.player.rover.terrain.get
          sensorValue: false
          scoutWheel:
            get: |
              if ( !this.scoutWheel ) {
                this.scoutWheel = this.find( "scout_body/scout_wheel" )[ 0 ];
              }
              return this.scoutWheel;
          wheelRadius: 0.179 
          wheels:
            - "scoutWheel"
        children:
          firstPerson:
            extends: source/cameraMount.vwf
            properties:
              navmode: walk
              translation: [ 0, 0, 1 ]
              cameraPose: [ 0, 0, 0 ]
              cameraSpeed: 0
              targetVisible: false
              useTargetRotation: true
          thirdPerson:
            extends: source/cameraMount.vwf
            properties:
              navmode: thirdPerson
              cameraPose: [ 16, 0, -15 ]
              cameraSpeed: 0
              usePoseFromCamera: true
          topDown:
            extends: source/cameraMount.vwf
            properties:
              navmode: topDown
              worldOffset: [ 0, 0, 40 ]
              cameraPose: [ 0, 0, -90 ]
              cameraSpeed: 10
          scout_body:
            extends: http://vwf.example.com/node3.vwf
            children:
              scout_wheel:
                extends: http://vwf.example.com/node3.vwf
      rover3:
        visible: false
        extends: source/fourWheeledRover.vwf
        implements: 
        - http://vwf.example.com/blockly/controller.vwf
        - source/cameraTarget.vwf
        source: assets/3d/heavyrover/heavy_rover.dae
        type: model/vnd.collada+xml
        properties:
          boundingAreaSize: [ 2, 2 ]
          defaultMount: thirdPerson
          displayName: "Rover3"
          castShadows: true
          receiveShadows: true
          executionSpeed: 0.5
          sceneNode:
            get: |
              if ( !this.sceneNode ) {
                this.sceneNode = this.find( "/" )[ 0 ];
              }
              return this.sceneNode;
          terrainName:
            set: |
              this.terrainName = value;
              this.terrain = this.find( "//" + value )[ 0 ];
              //@ sourceURL=index.vwf.player.rover.terrainName.set
            value: environment
          terrain:
            get: |
              if ( !this.terrain ) {
                this.terrain = this.find( "//" + this.terrainName )[ 0 ];
              }
              return this.terrain;
              //@ sourceURL=index.vwf.player.rover.terrain.get
          sensorValue: false
          wheelFL:
            get: |
              if ( !this.wheelFL ) {
                this.wheelFL = this.find( "wheel_l1" )[ 0 ];
              }
              return this.wheelFL;
          wheelML:
            get: |
              if ( !this.wheelML ) {
                this.wheelML = this.find( "wheel_l2" )[ 0 ];
              }
              return this.wheelML;
          wheelBL:
            get: |
              if ( !this.wheelBL ) {
                this.wheelBL = this.find( "wheel_l3" )[ 0 ];
              }
              return this.wheelBL;
          wheelFR:
            get: |
              if ( !this.wheelFR ) {
                this.wheelFR = this.find( "wheel_r1" )[ 0 ];
              }
              return this.wheelFR;
          wheelMR:
            get: |
              if ( !this.wheelMR ) {
                this.wheelMR = this.find( "wheel_r2" )[ 0 ];
              }
              return this.wheelMR;
          wheelBR:
            get: |
              if ( !this.wheelBR ) {
                this.wheelBR = this.find( "wheel_r3" )[ 0 ];
              }
              return this.wheelBR;
          wheelRadius: 0.635
          wheels:
            - "wheelFL"
            - "wheelML"
            - "wheelBL"
            - "wheelFR"
            - "wheelMR"
            - "wheelBR"
        children:
          firstPerson:
            extends: source/cameraMount.vwf
            properties:
              navmode: walk
              translation: [ 0, 0, 1 ]
              cameraPose: [ 0, 0, 0 ]
              cameraSpeed: 0
              targetVisible: false
              useTargetRotation: true
          thirdPerson:
            extends: source/cameraMount.vwf
            properties:
              navmode: thirdPerson
              cameraPose: [ 16, 0, -15 ]
              cameraSpeed: 0
              usePoseFromCamera: true
          topDown:
            extends: source/cameraMount.vwf
            properties:
              navmode: topDown
              worldOffset: [ 0, 0, 40 ]
              cameraPose: [ 0, 0, -90 ]
              cameraSpeed: 10
          wheel_l1:
            extends: http://vwf.example.com/node3.vwf
          wheel_r1:
            extends: http://vwf.example.com/node3.vwf
          wheel_l2:
            extends: http://vwf.example.com/node3.vwf
          wheel_r2:
            extends: http://vwf.example.com/node3.vwf
          wheel_l3:
            extends: http://vwf.example.com/node3.vwf
          wheel_r3:
            extends: http://vwf.example.com/node3.vwf
  pickups:
    extends: http://vwf.example.com/node3.vwf
    children:
      radio:
        extends: source/pickups/radio.vwf
        properties:
          animationPlaying: true
          animationLoop: true
          tilePosition: [ 0, 14 ]
      battery:
        extends: source/pickups/battery_1.vwf
        properties:
          tilePosition: [ 0, 4 ]
      signal:
        extends: source/pickups/signal.vwf
      supplies_1:
        extends: source/pickups/supplies.vwf
      supplies_2:
        extends: source/pickups/supplies.vwf
      helicam:
        extends: source/pickups/helicam.vwf
        properties:
          tilePosition: [ 0, 1 ]
      minirover:
        extends: source/pickups/minirover.vwf
  cargoPod2:
    extends: source/buildings/basePod.vwf
    properties:
      tilePosition: [ -32, 66 ]
      visible: true
  solarPanel1: 
    extends: source/buildings/solarPanel.vwf
  solarPanel2: 
    extends: source/buildings/solarPanel.vwf
  solarPanel3: 
    extends: source/buildings/solarPanel.vwf
  solarPanel4: 
    extends: source/buildings/solarPanel.vwf
  scenario_dummy:
    includes: source/scenario/scenario_dummy.vwf
  introScreenScenario:
    includes: source/scenario/introScreenScenario.vwf
  Mission1Task1:
    includes: source/scenario/scenario1a.vwf
  Mission1Task2:
    includes: source/scenario/scenario1b.vwf
  Mission1Task3:
    includes: source/scenario/scenario1c.vwf
  Mission1Task4:
    includes: source/scenario/scenario1d.vwf
  Mission1Task5:
    includes: source/scenario/scenario1e.vwf
  Mission1Task6:
    includes: source/scenario/scenario1f.vwf
  Mission1Task7:
    includes: source/scenario/scenario1g.vwf
  Mission1Task8:
    includes: source/scenario/scenario1h.vwf
  Mission1Task9:
    includes: source/scenario/scenario1i.vwf
  Mission2Task1:
    includes: source/scenario/scenario2a.vwf
  Mission2Task2:
    includes: source/scenario/scenario2b.vwf
  Mission2Task3:
    includes: source/scenario/scenario2c.vwf
  Mission2Task4:
    includes: source/scenario/scenario2d.vwf
  Mission2Task5:
    includes: source/scenario/scenario2e.vwf
  Mission2Task6:
    includes: source/scenario/scenario2f.vwf
  Mission2Task7:
    includes: source/scenario/scenario3a.vwf
  Mission2Task8:
    includes: source/scenario/scenario3b.vwf
  Mission2Task9:
    includes: source/scenario/scenario3c.vwf
  Mission2Task10:
    includes: source/scenario/scenario3d.vwf
  Mission2Task11:
    includes: source/scenario/scenario3e.vwf
  Mission2Task12:
    includes: source/scenario/scenario3f.vwf
  Mission3Task1:
    includes: source/scenario/temporarymission3task1.vwf
  Mission3Task2:
    includes: source/scenario/temporarymission3task2.vwf
  Mission3Task3:
    includes: source/scenario/temporarymission3task3.vwf
#  mission3task1:
#    includes: source/scenario/mission3task1.vwf
  Mission4Task1:
    includes: source/scenario/mission4task1.vwf
  Mission4Task2:
    includes: source/scenario/mission4task2.vwf
  Mission4Task3:
    includes: source/scenario/mission4task3.vwf
  Mission4Task4:
    includes: source/scenario/mission4task4.vwf
  Mission4Task5:
    includes: source/scenario/mission4task5.vwf
  Mission4Task6:
    includes: source/scenario/mission4task6.vwf
  Mission5Task1:
    includes: source/scenario/mission5task1.vwf
  # TODO: Use only one graph object. No need for two.
  blocklyGraph:
    extends: http://vwf.example.com/graphtool/graph.vwf
    implements: 
      - source/marsGameNode.vwf
      - http://vwf.example.com/sceneGetter.vwf
    properties:
      graphScale: 3
      gridInterval: 1
      gridLineInterval: 4
      gridLength: 64
      xAxisVisible: true
      yAxisVisible: true
      zAxisVisible: false
      gridVisible: true
      graphVisible: false
      axisOpacity: 1
      gridOpacity: 0.75
      renderTop: true
      isCollidable: false
    children:
      blocklyLine:
        extends: http://vwf.example.com/graphtool/graphlinefunction.vwf
        properties:
          lineFunction:
            set: |
              this.lineFunction = value;
              this.lineGraphed();
            value: undefined
          startValue: -64
          endValue: 64
          pointCount: 400
          color: [ 100, 255, 100 ]
          opacity: 1
          lineThickness: 0.15
          renderTop: true
          visible: false
        events:
          lineGraphed:
  gridTileGraph:
    extends: http://vwf.example.com/graphtool/graph.vwf
    properties:
      graphScale: 3
      gridInterval: 1
      gridLineInterval: 4
      gridLength: 1
      xAxisVisible: false
      yAxisVisible: false
      zAxisVisible: false
      gridVisible: false
      graphVisible: false
      axisOpacity: 1
      gridOpacity: 1
      renderTop: false
      tileVisible: false
    children:
      callOutTile:
        extends: http://vwf.example.com/graphtool/graphplane.vwf
        properties:
          origin: [ 0, 0, 0 ]
          normal: [ 0, 0, 1 ]
          rotationAngle: 90
          size: 1
          color: [ 255, 255, 255 ]
          opacity: 0.5
          doubleSided: false
          renderTop: true
          visible: false
          isBlinking: false
        methods:
          callOut:
          blink:
          stopBlink:
        scripts:
          - source: source/callouttile.js
  graph:
    extends: http://vwf.example.com/node3.vwf
    implements: http://vwf.example.com/blockly/controller.vwf
    properties:
      blockly_toolbox: assets/scenario/graph.xml
  alerts:
    extends: http://vwf.example.com/logger.vwf
    properties:
      logger_maxLogs: 1
      logger_lifeTime: 10000
      logger_logs: []
    scripts:
      - source: source/loggerHelper.js
  subtitles:
    extends: http://vwf.example.com/logger.vwf
    properties:
      logger_maxLogs: 10
      logger_lifeTime: 10000
      logger_logs: []
      strings: []
    methods:
      addSubtitle:
    scripts:
    - source: source/loggerHelper.js
scripts: 
 - source: source/scene.js
