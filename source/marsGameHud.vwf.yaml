---
extends: http://vwf.example.com/hud/overlay.vwf
implements:
  - http://vwf.example.com/sceneGetter.vwf
properties:
  visible: true
  lastBlocklyNodeID:
methods:
  elementPreDraw:
    parameters:
      - context
      - element
    body: |
      var alpha = 1;
      var time = Date.now() / 1000;
      if ( !element.enabled ) {
        alpha = 0.5;
      } else if ( element.isBlinking ) {
        if ( time  - element.lastBlinkTime > element.blinkInterval ) {
          alpha = 0.5;
          if ( time - element.lastBlinkTime > element.blinkInterval + element.blinkDuration ) {
            element.lastBlinkTime = time;
          }
        }
      }
      context.globalAlpha = alpha;
  elementPostDraw:
    parameters:
      - context
      - element
    body: |
      context.globalAlpha = 1;
children:
  blocklyButton:
    extends: http://vwf.example.com/hud/element.vwf
    properties:
      images:
        icon:
          src: "assets/images/hud/blockly_large.png"
      width: 64
      height: 64
      visible: true
      enabled: true
      alignH: right
      alignV: bottom
      offsetH: -32
      offsetV: -30
      isBlinking: true
      lastBlinkTime: 0
      blinkInterval: 0.25
      blinkDuration: 0.25
    methods:
      draw:
        parameters:
          - context
          - position
        body: |
          if ( this.icon ) {
            context.drawImage( this.icon, position.x, position.y );
          }
  graphButton:
    extends: http://vwf.example.com/hud/element.vwf
    properties:
      images:
        icon:
          src: "assets/images/hud/graph_display.png"
      width: 64
      height: 64
      visible: true
      enabled: true
      alignH: right
      alignV: bottom
      offsetH: -104
      offsetV: -30
      isBlinking: false
      lastBlinkTime: 0
      blinkInterval: 0.25
      blinkDuration: 0.25
    methods:
      draw:
        parameters:
          - context
          - position
        body: |
          if ( this.icon ) {
            context.drawImage( this.icon, position.x, position.y );
          }
  tilesButton:
    extends: http://vwf.example.com/hud/element.vwf
    properties:
      images:
        icon:
          src: "assets/images/hud/tiles_button.png"
      width: 64
      height: 64
      visible: true
      enabled: true
      alignH: right
      alignV: bottom
      offsetH: -176
      offsetV: -30
      isBlinking: false
      lastBlinkTime: 0
      blinkInterval: 0.25
      blinkDuration: 0.25
    methods:
      draw:
        parameters:
          - context
          - position
        body: |
          if ( this.icon ) {
            context.drawImage( this.icon, position.x, position.y );
          }
  optionsButton:
    extends: http://vwf.example.com/hud/element.vwf
    properties:
      images:
        icon:
          src: "assets/images/hud/options_button.png"
      width: 64
      height: 64
      visible: true
      enabled: true
      alignH: right
      alignV: bottom
      offsetH: -248
      offsetV: -30
      isBlinking: false
      lastBlinkTime: 0
      blinkInterval: 0.25
      blinkDuration: 0.25
    methods:
      draw:
        parameters:
          - context
          - position
        body: |
          if ( this.icon ) {
            context.drawImage( this.icon, position.x, position.y );
          }
  objective:
    extends: http://vwf.example.com/hud/element.vwf
    properties:
      images:
        icon:
          src: "assets/images/hud/objective_indicator.png"
      width: 32
      height: 32
      visible: true
      enabled: true
      alignH: left
      alignV: bottom
      offsetH: 30
      offsetV: -172
      isBlinking: false
      lastBlinkTime: 0
      blinkInterval: 0.25
      blinkDuration: 0.25
      text:
        set: |
          this.text = value;
          this.blinkTicks = 10;
        value: ""
      blinkTicks: 0
      blinkInterval: 0.5
      lastBlinkTime: 0
      opacity: 1
    methods:
      draw:
        parameters:
          - context
          - position
        body: |
          var time = vwf_view.kernel.time();
          var timeSinceLastBlink = time - this.lastBlinkTime;
          if ( this.text && this.text.length > 0 ) {
            if ( this.icon ) {
              if ( this.blinkTicks > 0 && timeSinceLastBlink >= this.blinkInterval ) {
                this.opacity = this.blinkTicks % 2 ? 1 : 0.5;
                this.blinkTicks--;
                this.lastBlinkTime = time;
              }
              context.globalAlpha = this.opacity;
              context.drawImage( this.icon, position.x, position.y );
              context.globalAlpha = 1;
            }
            context.font = '16px Arial';
            context.fillStyle = "rgb( 224, 255, 100 )";
            context.strokeStyle = "rgb( 0, 0, 0 )";
            context.lineWidth = 3;
            context.textAlign = "left";
            context.textBaseline = "top";
            context.strokeText( this.text, position.x + 40, position.y + 6 );
            context.fillText( this.text, position.x + 40, position.y + 6 );
          }
  batteryMeter:
    extends: http://vwf.example.com/hud/element.vwf
    properties:
      images:
        frame:
          src: "assets/images/hud/rover_frame.png"
        portrait:
          src: "assets/images/hud/rover_portrait.png"
      width: 128
      height: 128
      visible: true
      enabled: true
      alignH: left
      alignV: top
      offsetH: 30
      offsetV: 30
      isBlinking: false
      lastBlinkTime: 0
      blinkInterval: 0.25
      blinkDuration: 0.25
      battery: 100
      maxBattery: 100
    methods:
      draw:
        parameters:
          - context
          - position
        body: |
          var battery = this.battery;
          var maxBattery = this.maxBattery;
          var arcWidth = ( this.height + this.width ) / 4 ;
          var centerX = position.x + this.width / 2;
          var centerY = position.y + this.height / 2;
          var radius = ( this.width + this.height ) / 4 - arcWidth;
          var start = Math.PI * 1.5;
          var end = start - battery / maxBattery * Math.PI * 2;
          context.beginPath();
          context.arc( centerX, centerY, arcWidth, 0, 2 * Math.PI, false );
          context.fillStyle = "rgba(50,90,150,0.5)";
          context.fill();
          context.beginPath();
          context.arc( centerX, centerY, arcWidth / 2, start, end, true );
          context.lineWidth = arcWidth - 1;
          context.strokeStyle = "rgb(50,130,255)";
          context.stroke();
          if ( this.portrait ) {
            context.drawImage( this.portrait, centerX - this.portrait.width / 2, centerY - this.portrait.height / 2 );
          }
          if ( this.frame ) {
            context.drawImage( this.frame, position.x, position.y );
          }
          context.textBaseline = "top";
          context.font = 'bold 24px Arial';
          context.fillStyle = "rgb(255,255,255)";
          context.textAlign = "left";
          context.fillText( Math.round(battery), position.x + this.width + 3, position.y - 1 );
  comms:
    extends: http://vwf.example.com/hud/element.vwf
    properties:
      images:
        background:
          src: "assets/images/hud/communication_bg.png"
        frame:
          src: "assets/images/hud/communication_frame.png"
        characterImage:
      width: 100
      height: 150
      visible: true
      enabled: true
      alignH: left
      alignV: bottom
      offsetH: 10
      offsetV: -10
      isBlinking: false
      lastBlinkTime: 0
      blinkInterval: 0.25
      blinkDuration: 0.25
      interval: 0
      direction: 0
    methods:
      draw:
        parameters:
          - context
          - position
        body: |
          if ( this.background ) {
            context.drawImage( this.background, position.x, position.y );
          }
          if ( this.characterImage && this.characterImage.src ) {
            context.save();
            var opening = this.height * this.interval;
            context.beginPath();
            context.rect( position.x, position.y + ( ( this.height - opening ) / 2 ), this.width, opening );
            context.clip();
            context.drawImage( this.characterImage, position.x, position.y );
            context.restore();
            this.interval += 0.1 * this.direction;
            if ( this.interval > 1 ) {
              this.interval = 1;
            } else if ( this.interval <= 0 && this.direction === -1 ) {
              this.interval = 0;
              this.characterImage.src = "";
            }
          }
          if ( this.frame ) {
            context.drawImage( this.frame, position.x, position.y );
          }
      addCharacterImage:
      removeCharacterImage:
  cameraSelector:
    extends: http://vwf.example.com/hud/element.vwf
    properties:
      images:
        frame:
          src: "assets/images/hud/camera_selector_frame.png"
        activeModeIcon:
      width: 96
      height: 96
      visible: true
      enabled: true
      alignH: right
      alignV: top
      offsetH: -30
      offsetV: 30
      isBlinking: false
      lastBlinkTime: 0
      blinkInterval: 0.25
      blinkDuration: 0.25
      activeMode:
        set: |
          var src = "assets/images/hud/camera_" + value + ".png";
          this.images.activeModeIcon.src = src;
    methods:
      draw:
        parameters:
          - context
          - position
        body: |
          if ( this.frame ) {
            context.drawImage( this.frame, position.x, position.y );
          }
          if ( this.activeModeIcon ) {
            var posx = ( position.x + this.width / 2 ) - ( this.activeModeIcon.width / 2 );
            var posy = ( position.y + this.height / 2 ) - ( this.activeModeIcon.height / 2 );
            context.drawImage( this.activeModeIcon, posx, posy );
          }
  firstPersonButton:
    extends: http://vwf.example.com/hud/element.vwf
    properties:
      images:
        icon:
          src: "assets/images/hud/camera_firstperson.png"
      width: 22
      height: 22
      visible: true
      enabled: true
      alignH: right
      alignV: top
      offsetH: -53
      offsetV: 32
      isBlinking: false
      lastBlinkTime: 0
      blinkInterval: 0.25
      blinkDuration: 0.25
      mode: firstPerson
    methods:
      draw:
        parameters:
          - context
          - position
        body: |
          if ( this.icon ) {
            context.drawImage( this.icon, position.x, position.y );
          }
  thirdPersonButton:
    extends: http://vwf.example.com/hud/element.vwf
    properties:
      images:
        icon:
          src: "assets/images/hud/camera_thirdperson.png"
      width: 22
      height: 22
      visible: true
      enabled: true
      alignH: right
      alignV: top
      offsetH: -34
      offsetV: 54
      isBlinking: false
      lastBlinkTime: 0
      blinkInterval: 0.25
      blinkDuration: 0.25
      mode: thirdPerson
    methods:
      draw:
        parameters:
          - context
          - position
        body: |
          if ( this.icon ) {
            context.drawImage( this.icon, position.x, position.y );
          }
  topDownButton:
    extends: http://vwf.example.com/hud/element.vwf
    properties:
      images:
        icon:
          src: "assets/images/hud/camera_topdown.png"
      width: 22
      height: 22
      visible: true
      enabled: true
      alignH: right
      alignV: top
      offsetH: -35
      offsetV: 80
      isBlinking: false
      lastBlinkTime: 0
      blinkInterval: 0.25
      blinkDuration: 0.25
      mode: topDown
    methods:
      draw:
        parameters:
          - context
          - position
        body: |
          if ( this.icon ) {
            context.drawImage( this.icon, position.x, position.y );
          }
scripts:
  source: source/marsGameHud.js