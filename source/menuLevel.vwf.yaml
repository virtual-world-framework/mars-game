# Copyright 2014 Lockheed Martin Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may 
# not use this file except in compliance with the License. You may obtain 
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and 
# limitations under the License.

--- 
extends: source/levelNode.vwf
properties:
  ambientColor: [ 128, 128, 128 ]
children:
  target:
    extends: source/cameraTarget.vwf
    properties:
      defaultMount: default
    children:
      default:
        extends: source/cameraMount.vwf
        properties:
          navmode: walk
          cameraPose: [ 0, 0, 0 ]
          cameraSpeed: 0
          worldOffset: [ -3.5, -12, 0 ]
  mars:
    extends: http://vwf.example.com/node3.vwf
    source: assets/3d/Start/planet_mars.dae
    type: model/vnd.collada+xml
    properties:
      axis: [ 0.25, 0, 0.9 ]
      rotationRate: 0.05
    methods:
      rotatePlanet:
    scripts: |
      this.rotatePlanet = function() {
        this.rotateBy( [ this.axis[0], this.axis[1], this.axis[2], this.rotationRate, 0 ] );
        this.future( 0.05 ).rotatePlanet();
      }
  satellite:
    extends: http://vwf.example.com/node3.vwf
    source: assets/3d/Start/satellite.dae
    type: model/vnd.collada+xml
    properties:
      scale: 0.5
    methods:
      moveSatellite:
    scripts: |
      this.moveSatellite = function() {
        var theta = ( this.time * 0.25 ) % ( 2 * Math.PI );
        this.translateTo( [ -2.5 + Math.sin( theta ) * 0.1, -7.5, 0.5 + Math.cos( theta ) * 0.075 - 0.25 ] );
        this.rotateBy( [ 0, 0.5, 0.5, Math.sin( theta ) * 0.1 ] );
        this.future( 0.05 ).moveSatellite();
      }
  stars:
    extends: http://vwf.example.com/node3.vwf
    source: assets/3d/Start/stars.dae
    type: model/vnd.collada+xml
    children:
      material:
        extends: http://vwf.example.com/shaderMaterial.vwf
        properties:
          texture:
            set: |
              var tex = THREE.ImageUtils.loadTexture( value );
              tex.wrapS = tex.wrapT = THREE.RepeatWrapping;
              this.uniforms.tex.value = tex;
              this.texture = value;
              this.uniforms = this.uniforms;
            value: "assets/3d/Start/stars.jpg"
          uniforms:
            tex:
              type: "t"
              value: 0
          vertexShader: |
            varying vec2 vUv;
            void main() {
              vUv = uvMap;
              vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
              gl_Position = projectionMatrix * mvPosition;
            }
          fragmentShader: |
            uniform sampler2D tex;
            varying vec2 vUv;
            void main() {
              gl_FragColor = texture2D( tex, vUv );
            }
  light:
    extends: http://vwf.example.com/light.vwf
    properties:
      lightType: "directional"
      color: [ 255, 255, 255 ]
      translation: [ -0.5, -0.25, 0.5 ]
      intensity: 1.2
scripts:
  - source: source/menuLevel.js