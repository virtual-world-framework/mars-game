# Copyright 2014 Lockheed Martin Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may 
# not use this file except in compliance with the License. You may obtain 
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and 
# limitations under the License.

# The action function factory creates action functions from yaml declarations.
# This is used to create the effects of triggers.
#
# This all leans on the declarative function executor, which creates the action
# functions from the yaml.

--- 
extends: source/triggers/declarativeFunctionExecutor.vwf

properties:

  # The action set contains the functions that  we pass into the function
  # executor.  It's fine if other function sets are also added, but this 
  # provides the baseline functionality that we need.
  actionSet:
    # cause scenario success/failure
    # arguments: none
    scenarioSuccess:
    scenarioFailure:

    # play/stops a sound
    # arguments: the sound name
    playSound:
    stopSound:

    # stop all sounds in a group (and clear the queue)
    # arguments: the name of the sound group
    stopSoundGroup:

    # stop every sound
    # arguments: none
    stopAllSounds:

    # play a video
    # arguments: the source of the video
    playVideo:

    # sets the master volume for the game
    # arguments: volume (0.0-1.0)
    setMasterVolume:

    displayPopup:

    showCommsDisplay:
    hideCommsDisplay:

    # writes a value to the sceneBlackboard which can be referenced later
    # to determine whether an action has occurred.
    # arguments: variableName, value (optional, default = 1)
    writeToBlackboard:

    # increments a value to the sceneBlackboard which can be referenced later
    # to determine whether an action has occurred.
    # arguments: variableName
    incrementBlackboardValue:

    # clears the value at the specified blackboard variableName
    # arguments: variableName
    clearBlackboardEntry:

    # delays for a fixed time, and then plays one or more actions
    # arguments: delay, action(s)
    delay:

    # hides the blocklyui
    # arguments: none
    hideBlockly:

    # clears the blocklyui of all blocks
    # arguments: none
    clearBlockly:

    # pans the camera to the node of the targetpath
    # If duration is specified, the camera will pan back to its original
    # target after the duration in seconds
    # arguments: targetPath, (optional) duration
    panCamera:

    # shows text in alert area
    # arguments: message
    showAlert:

    # resets sensors on the rover
    # arguments: none
    resetRoverSensors:

    # Puts the camera in third-person with the specified orientation
    # arguments: pose[ radius, yaw, pitch ]
    setCinematicCameraView:

    # Sets the default orientation of the camera in third person
    # arguments: pose[ radius, yaw, pitch ]
    setThirdPersonStartPose:

    # Resets the camera to the point of view before the cinematic camera mode was set
    # arguments: none
    resetCameraView:

    # Adds a blinking tile to the objective grid space
    # arguments: coordinates
    callOutObjective:

    # Removes callout tile
    # arguments: none
    cancelCallOut:

    # Sets the objective HUD text
    # arguments: objectiveText
    setObjective:

    # Sets a property of a HUD element to the specified value
    # arguments: elementName, propertyName, propertyValue
    setHUDProperty:

    # Sets up the game when the loadGame method is used
    # arguments: none
    initGameOnLoad:

    transmogrify:

scripts:
- source: source/triggers/actionFactory.js
