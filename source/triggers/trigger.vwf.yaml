# Copyright 2014 Lockheed Martin Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may 
# not use this file except in compliance with the License. You may obtain 
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and 
# limitations under the License.

--- 
extends: http://vwf.example.com/node.vwf

implements: 
  - http://vwf.example.com/sceneGetter.vwf
  - http://vwf.example.com/assert.vwf

properties:
  # The actions we take when the trigger fires
  actions: 

  # This doesn't appear to be getting deleted properly, so redundantly 
  #   disable it if it should be deleted.
  isEnabled: 
    set: |
      this.setIsEnabled$( value );
    value: false

  # If this is set to true, we'll spew decision-making details to the console.
  spewToLog: false

  # If triggers are in a trigger group together, only one of them will execute
  #   at a time.  If more than one triggers at the same time, the one with the
  #   highest priority will be picked.  If more than one has the same priority,
  #   we pick at random.  See the triggerGroup and triggerGroupManager 
  #   prototypes for more details.
  groupName:
  priority:

  # The actual trigger group, looked up using the name.
  group:
    get: |
      if ( !this.group ) {
        this.group = this.groupName && this.scene && this.scene.triggerGroupManager ?
          this.scene.triggerGroupManager.getGroup( this.groupName ) :
          undefined;
      }
      return this.group;

methods:
  # Called once the game has been initialized and everything is attached to the
  #   scene.
  postInit:

  # Called just after the trigger is created, so that it can load itself.
  # Arguments:
  #   clauseGen   - The generator for creating clauses
  #   actionGen   - The generator for creating actions
  #   context     - The scene (soon to be depracated)
  #   definition  - The definition object for the trigger
  # Returns: true if initialization succeeded, false otherwise
  initTrigger:

  # Called by the clauses when a possible triggering event occurs.  Checks
  #   if the trigger should fire, and executes the actions if it should.
  checkFire:

  # Trigger groups need to be able to do the checking and firing separately.
  #   checkFire() just calls these for you (it's just a shortcut).
  check:
  fire:

  # A helper function for spewing to the console.
  spew:

  # The setter for isEnabled.  DO NOT CALL DIRECTLY!
  setIsEnabled$:

events:
  enabled:
  disabled:
  evaluated:
  triggered:

scripts:
- source: source/triggers/trigger.js
