# The boolean function factory creates boolean function from yaml declarations.
# It also sets up the callbacks necessary to know when the boolean function 
# needs to be reevaluated. This is used to create the checks for triggers.
#
# A boolean function contains a single "clause," which is something we want to
# check (for example, an isAtPosition clause, or a hasObject clause).  The 
# clause can be an and, or, or not clause, and these clauses contain sub-
# clauses.
#
# This all leans on the declarative function executor, which treats the clauses
# as declarative functions that set up the necessary callbacks and return the
# function that performs the actual check.
--- 
extends: source/triggers/declarativeFunctionExecutor.vwf

properties:

  # The clause set contains the clauses that  we pass into the function
  # executor.  It's fine if other function sets are also added, but this 
  # provides the baseline functionality that we need.
  clauseSet:

    # arguments: an array of clauses
    and:
    or:

    # arguments: a single clause
    not:

    # arguments: object, x, y
    isAtPosition:

    # arguments: owner, object
    hasObject:

    # arguments: object
    onMoved:
    moveFailed:

    # arguments: these blockly clauses can take a single blockly object (e.g.
    #   "rover"), an array of blockly objects (e.g. [ "minirover", "graph" ]),
    #   or nothing (in which case, we fire them if the event occurs on *any*
    #   blockly object).  An empty array counts as "nothing."
    isBlocklyExecuting:
    onBlocklyStarted:
    onBlocklyStopped:
    onBlocklyWindowOpened:

    # arguments:
    #   1: A blockly object (as described above)
    #   2: add | remove | either - should it fire when a block is added, when 
    #      one is removed, or either.  Either is the default.
    #   3: the type of block, on array of block types, or nothing (in which 
    #      case any type of block will match). An empty array counts as 
    #      "nothing."
    onBlocklyProgramChanged:

    # arguments: scenarioName (optional)
    onScenarioStart:

    # arguments: (none)
    onIntroScreensComplete:

    # This is a crappy solution, but better than no solution at all.  It will only
    #   work if it is the last argument in an and/or clause - basically, the first 
    #   time it is checked is the only time that it will return true (whether the
    #   trigger actually fires or not).
    # arguments: none
    doOnce:

    #Do once ever - this takes a string as an argument and returns true only the
    #   first time it is checked but persists across clearing of triggers using
    #   a blackboard to store values.
    doOnceEver:

    # Checks to see if the graph passes through a particular x,y point
    # arguments: an x,y array
    blocklyLineEval:

scripts:
- source: source/triggers/booleanFunctionFactory.js
