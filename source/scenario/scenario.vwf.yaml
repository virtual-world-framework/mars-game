# Copyright 2014 Lockheed Martin Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may 
# not use this file except in compliance with the License. You may obtain 
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and 
# limitations under the License.

--- 
# TODO: remove the dependency on task.vwf and just inherit from node.
extends: http://vwf.example.com/lesson/task.vwf

implements: 
  - http://vwf.example.com/assert.vwf
  - http://vwf.example.com/sceneGetter.vwf

properties:
  # if true, the scenario will tell the scene to run it once it's been fully
  #   initialized.
  # NOTE: we currently only support one scenario at a time, so if this is true
  #   for more than one then there will be ordering issues and only one will 
  #   run.
  runOnStartup: false

  # These are the standard properties that every scenario should define
  scenarioName:
  startState:
  triggers$:

  # Keeps track of whether the scenario is currently running.
  # NOTE: you should not set this directly!!!  The scene manages it through 
  #   the scenarioChanged and scenarioReset events.
  isRunning: 
    set: |
      this.setIsRunning$( value );
    value: false

methods:
  # Called once the game has been initialized and everything is attached to the
  #   scene.
  postInit:

  # These are called from the scene when the scenario starts.
  # NOTE: Depracated.
  # TODO: remove
  startScenario:

  # Event handlers that get hit any time *any* scenario (not just this one) gets
  #   changed or reset.  In both cases, the first argument is the name of the
  #   scenario that's starting.
  onScenarioChanged:
  onScenarioReset:

  # Called when the scenario is started or stopped (which should happen as a 
  #   result of the above event managers).
  # NOTE: YOU SHOULD NOT CALL THESE DIRECTLY!  They're called in the setter for
  #   isRunning, and they need to stay in synch.
  start:
  stop:

  # The setter for isRunning.  DO NOT CALL DIRECTLY!
  setIsRunning:

  # A callback that allows us to set oursevles as the current scenario on the
  #   scene.
  # NOTE: Again, DO NOT CALL DIRECTLY!
  startInitialScenario:

scripts:
- source: scenario.js
